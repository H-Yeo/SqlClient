<?xml version="1.0"?>
<docs>
  <members name="SqlBatch">
    <SqlBatch>
      <summary></summary>
      <remarks>
        <format type="text/markdown">
          <![CDATA[
## Examples
The following example creates a <xref:Microsoft.Data.SqlClient.SqlConnection> and a <xref:Microsoft.Data.SqlClient.SqlBatch>, then adds multiple <xref:Microsoft.Data.SqlClient.SqlBatchCommand> objects to the batch. It then executes the batch, creating a <xref:Microsoft.Data.SqlClient.SqlDataReader>. The example reads through the results of the batch commands, writing them to the console. Finally, the example closes the <xref:Microsoft.Data.SqlClient.SqlDataReader> and then the <xref:Microsoft.Data.SqlClient.SqlConnection> as the `using` blocks fall out of scope.

[!code-csharp[SqlCommand Example#1](~/../sqlclient/doc/samples/SqlBatch_ExecuteReader.cs#1)]
]]>
        </format>
      </remarks>
    </SqlBatch>
    <ctor1>
      <summary>
        Initializes a new <see cref="SqlBatch"/>.
      </summary>
      <value></value>
      <remarks>
        <format type="text/markdown">
          <![CDATA[
## Examples
The following example creates a <xref:Microsoft.Data.SqlClient.SqlConnection> and a <xref:Microsoft.Data.SqlClient.SqlBatch>, then adds multiple <xref:Microsoft.Data.SqlClient.SqlBatchCommand> objects to the batch. It then executes the batch, creating a <xref:Microsoft.Data.SqlClient.SqlDataReader>. The example reads through the results of the batch commands, writing them to the console. Finally, the example closes the <xref:Microsoft.Data.SqlClient.SqlDataReader> and then the <xref:Microsoft.Data.SqlClient.SqlConnection> as the `using` blocks fall out of scope.

[!code-csharp[SqlCommand Example#1](~/../sqlclient/doc/samples/SqlBatch_ExecuteReader.cs#1)]
]]>
        </format>
      </remarks>
    </ctor1>
    <ctor2>
      <summary>Initializes a new <see cref="SqlBatch"/>.
      </summary>
      <param name="connection">
        A
        <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />
        that represents the connection to an instance of SQL Server.
      </param>
      <param name="transaction">
        The
        <see cref="T:Microsoft.Data.SqlClient.SqlTransaction" />
        in which the
        <see cref="T:Microsoft.Data.SqlClient.SqlCommand" />
        executes.
      </param>
      <remarks>
        <format type="text/markdown">
          <![CDATA[
]]>
        </format>
      </remarks>
    </ctor2>
    <Timeout>
      <inheritdoc cref="P:Microsoft.Data.SqlClient.SqlBatch.Timeout"/>
    </Timeout>
    <Connection>
      <summary>
        Gets or sets the
        <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />
        used by this instance of the
        <see cref="T:Microsoft.Data.SqlClient.SqlBatch" />
        .
      </summary>
      <remarks>
        <format type="text/markdown">
          <![CDATA[
]]>
        </format>
      </remarks>
    </Connection>
    <Transaction>
      <summary>Gets or sets the <see cref="T:Microsoft.Data.SqlClient.SqlTransaction" /> within which the <see cref="T:Microsoft.Data.SqlClient.SqlBatch" /> commands execute.</summary>
      <remarks>
        <format type="text/markdown">
          <![CDATA[
]]>
        </format>
      </remarks>
    </Transaction>
    <BatchCommands>
      <summary>
        The list of commands contained in the batch in a <see cref="T:Microsoft.Data.SqlClient.SqlBatchCommandCollection" />.
      </summary>
      <remarks>
        <format type="text/markdown">
          <![CDATA[
## Examples
The following example creates a <xref:Microsoft.Data.SqlClient.SqlConnection> and a <xref:Microsoft.Data.SqlClient.SqlBatch>, then adds multiple <xref:Microsoft.Data.SqlClient.SqlBatchCommand> objects to the batch. It then executes the batch, creating a <xref:Microsoft.Data.SqlClient.SqlDataReader>. The example reads through the results of the batch commands, writing them to the console. Finally, the example closes the <xref:Microsoft.Data.SqlClient.SqlDataReader> and then the <xref:Microsoft.Data.SqlClient.SqlConnection> as the `using` blocks fall out of scope.

[!code-csharp[SqlCommand Example#1](~/../sqlclient/doc/samples/SqlBatch_ExecuteReader.cs#1)]
]]>
        </format>
      </remarks>
    </BatchCommands>
    <DbBatchCommands>
      <inheritdoc cref="P:Microsoft.Data.SqlClient.SqlBatch.DbBatchCommands"/>      
    </DbBatchCommands>
    <DbConnection>
      <inheritdoc cref="P:Microsoft.Data.SqlClient.SqlBatch.DbConnection"/>         
    </DbConnection>
    <DbTransaction>
      <inheritdoc cref="P:Microsoft.Data.SqlClient.SqlBatch.DbTransaction"/>               
    </DbTransaction>
    <Cancel>
      <inheritdoc cref="P:Microsoft.Data.SqlClient.SqlBatch.Cancel"/>       
    </Cancel>
    <ExecuteNonQuery>
      <inheritdoc cref="M:Microsoft.Data.SqlClient.SqlBatch.ExecuteNonQuery"/>       
    </ExecuteNonQuery>
    <ExecuteNonQueryAsync>
      <inheritdoc cref="M:Microsoft.Data.SqlClient.SqlBatch.ExecuteNonQueryAsync"/>       
    </ExecuteNonQueryAsync>
    <ExecuteScalar>
      <inheritdoc cref="P:Microsoft.Data.SqlClient.SqlBatch.ExecuteScalar"/>       
    </ExecuteScalar>
    <ExecuteScalarAsync>
      <inheritdoc cref="M:Microsoft.Data.SqlClient.SqlBatch.ExecuteScalarAsync"/>       
    </ExecuteScalarAsync>
    <Prepare>
      <inheritdoc cref="P:Microsoft.Data.SqlClient.SqlBatch.Prepare"/>       
    </Prepare>
    <PrepareAsync>
      <inheritdoc cref="M:Microsoft.Data.SqlClient.SqlBatch.PrepareAsync"/>       
    </PrepareAsync>
    <ExecuteDbDataReader>
      <inheritdoc cref="M:Microsoft.Data.SqlClient.SqlBatch.ExecuteDbDataReader"/>       
    </ExecuteDbDataReader>
    <ExecuteDbDataReaderAsync>
      <inheritdoc cref="M:Microsoft.Data.SqlClient.SqlBatch.ExecuteDbDataReaderAsync"/>       
    </ExecuteDbDataReaderAsync>        
    <Commands>
      <summary>
        The list of commands contained in the batch in a 
        <see cref="T:System.Collections.Generic.IList"/> of
        <see cref="T:Microsoft.Data.SqlClient.SqlBatchCommand"/> objects.
      </summary>
      <remarks>
        <format type="text/markdown"></format>
      </remarks>
    </Commands>
    <ExecuteReader>
      <summary>
        Sends the
        <see cref="P:Microsoft.Data.SqlClient.SqlBatch.Commands" />
        to the
        <see cref="P:Microsoft.Data.SqlClient.SqlCommand.Connection" />
        and builds a
        <see cref="T:Microsoft.Data.SqlClient.SqlDataReader" />
        .
      </summary>
      <remarks>
        <format type="text/markdown">
          <![CDATA[
## Examples
The following example creates a <xref:Microsoft.Data.SqlClient.SqlConnection> and a <xref:Microsoft.Data.SqlClient.SqlBatch>, then adds multiple <xref:Microsoft.Data.SqlClient.SqlBatchCommand> objects to the batch. It then executes the batch, creating a <xref:Microsoft.Data.SqlClient.SqlDataReader>. The example reads through the results of the batch commands, writing them to the console. Finally, the example closes the <xref:Microsoft.Data.SqlClient.SqlDataReader> and then the <xref:Microsoft.Data.SqlClient.SqlConnection> as the `using` blocks fall out of scope.

[!code-csharp[SqlCommand Example#1](~/../sqlclient/doc/samples/SqlBatch_ExecuteReader.cs#1)]
]]>
        </format>
      </remarks>
    </ExecuteReader>
    <ExecuteReaderAsync>
      <summary>
        An asynchronous version of
        <see cref="M:Microsoft.Data.SqlClient.SqlBatch.ExecuteReader" />
        , which sends the
        <see cref="P:Microsoft.Data.SqlClient.SqlBatch.Commands" />
        to the
        <see cref="P:Microsoft.Data.SqlClient.SqlBatch.Connection" />
        and builds a
        <see cref="T:Microsoft.Data.SqlClient.SqlDataReader" />
        . Exceptions will be reported via the returned Task object.
      </summary>
      <remarks>
        <format type="text/markdown">
          <![CDATA[
]]>
        </format>
      </remarks>
    </ExecuteReaderAsync>
    <CreateDbBatchCommand>
      <inheritdoc cref="P:Microsoft.Data.SqlClient.SqlBatch.CreateDbBatchCommand"/>       
    </CreateDbBatchCommand>
  </members>
</docs>
